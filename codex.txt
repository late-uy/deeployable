You will generate a complete, production-grade MVP called "Deeployable".
It must be simple to install on Ubuntu and fully manageable from a web UI.
When in doubt, choose simplicity and maintainability.

========================================
1) PROJECT GOAL & NON-NEGOTIABLES
========================================
- Single-project deploy manager with a friendly UI for developers (no DevOps expertise required).
- Works on any Ubuntu host with Docker installed.
- `docker compose up -d` + `./bootstrap.sh` must bring up everything:
  - API on :3001 (NestJS + Prisma + SQLite)
  - UI on :8080 (Next.js)
  - SQLite persisted on a local Docker volume or bind mount.
- Setup/login over HTTP :8080 initially; SSL will be Phase 2 (Caddy), NOT in MVP.
- MVP handles:
  1) Initial admin creation via bootstrap.
  2) GitHub connection (OAuth preferred, Personal Access Token fallback).
  3) Mapping branches to environments (dev/test/prod).
  4) Environment variables (public/private).
  5) Github webhook to trigger deploys (queue with simple in-memory runner).
  6) Domains management screens (DNS manual verification in MVP).
  7) Health checks (DB, optional Docker presence on host).
- Code quality: ESLint v9, typescript-eslint v8, Prettier, strict TS.
- Documentation: clear README, CONTRIBUTING, .env.example files, Ubuntu guide.

========================================
2) REPO STRUCTURE (CREATE EXACTLY)
========================================
- Root:
  - package.json (npm workspaces for api & ui)
  - package-lock.json (generated)
  - README.md
  - CONTRIBUTING.md
  - .gitignore
  - .editorconfig
  - .prettierrc
  - eslint.config.mjs (root config for monorepo)
  - docker-compose.yml
  - bootstrap.sh (bash)
- /api (NestJS + Prisma + SQLite)
  - package.json
  - tsconfig.json
  - tsconfig.build.json
  - nest-cli.json
  - eslint.config.mjs
  - .prettierrc
  - .gitignore
  - .env.example
  - prisma/
    - schema.prisma
    - migrations/ (empty at start; migrations will be generated by Prisma)
    - var/ (runtime dir for SQLite; ensure created by bootstrap)
  - src/
    - main.ts (CORS enabled from UI origin; robust ValidationPipe)
    - app.module.ts
    - app.controller.ts (GET / and GET /health)
    - prisma/
      - prisma.module.ts
      - prisma.service.ts (no raw execute returning results on sqlite)
    - auth/
      - auth.module.ts
      - auth.controller.ts
      - auth.service.ts (registerRoot, login, hasUsers)
      - jwt.strategy.ts (import type fixes)
      - dto/login.dto.ts
      - roles.guard.ts
      - roles.decorator.ts
    - users/
      - users.module.ts
      - users.service.ts
      - user.entity.ts (types only)
    - projects/
      - projects.module.ts
      - projects.controller.ts
      - projects.service.ts
      - project.entity.ts (types only)
      - dto.ts
    - environments/
      - environments.module.ts
      - environments.controller.ts
      - environments.service.ts
      - environment.entity.ts (types only)
      - dto.ts
    - variables/
      - variables.module.ts
      - variables.controller.ts
      - variables.service.ts
      - dto.ts
    - domains/
      - domains.module.ts
      - domains.controller.ts
      - domains.service.ts (MVP: store/verify TXT manually; no ACME here)
      - dto.ts
    - deploys/
      - deploys.module.ts
      - deploys.controller.ts
      - deploys.service.ts (in-memory queue; logs per deploy; statuses)
    - hooks/
      - hooks.module.ts
      - hooks.controller.ts (POST /hooks/github)
    - platform/
      - platform.module.ts
      - platform.controller.ts (GET /platform/health → {db, docker})
    - docker/
      - docker.service.ts (detect docker binary presence on host; no privileged calls in MVP)
- /ui (Next.js 15 App Router)
  - package.json
  - tsconfig.json
  - next.config.js (or .ts) with `outputFileTracingRoot` at project root; no Turbopack-specific flags required
  - eslint.config.mjs
  - .prettierrc
  - .gitignore
  - .env.example
  - scripts/
    - dev.js (Next dev on :8080)
    - start.js (start Next, respecting PORT)
  - src/
    - app/
      - layout.tsx (Navbar with health indicators)
      - page.tsx (splash)
      - login/page.tsx (login form → calls /auth/login)
      - setup/page.tsx (if hasUsers=false → register root)
      - dashboard/page.tsx (links to sections)
      - dashboard/environments/page.tsx (CRUD envs)
      - dashboard/variables/page.tsx (CRUD env vars)
      - dashboard/domains/page.tsx (CRUD domains + verify)
      - dashboard/deploys/page.tsx (list + trigger manual deploy)
      - health/route.ts (UI health route)
      - globals.css (basic, neutral theme)
    - lib/api.ts (fetch helper; uses NEXT_PUBLIC_API_BASE)
    - components/* (small presentational components as needed)
  - public/
    - favicon.ico (placeholder)

========================================
3) ROOT package.json (WORKSPACES + SCRIPTS)
========================================
- Use npm workspaces: "workspaces": ["api","ui"]
- Scripts (root):
  - "setup": "npm run setup -w api && npm run setup -w ui"
  - "build": "npm run build -w api && npm run build -w ui"
  - "start": "concurrently -k -n api,ui -c green,cyan \"npm run start -w api\" \"npm run start -w ui\""
  - "lint":  "eslint \"api/src/**/*.{ts,tsx,js,jsx}\" \"ui/src/**/*.{ts,tsx,js,jsx}\""
  - "format": "prettier --write ."
- Dev deps at root: eslint@^9, @eslint/js@^9, typescript-eslint@^8, prettier, concurrently

========================================
4) ESLINT/PRETTIER (ROOT & PACKAGES)
========================================
- Root `eslint.config.mjs` (flat config, ESM):
  - parser: typescript-eslint
  - extends: @eslint/js, typescript-eslint/recommended-type-checked, typescript-eslint/stylistic-type-checked
  - include **api/src** and **ui/src**
  - ignore build outputs, node_modules
  - turn off excessively noisy rules for MVP (e.g., no-explicit-any only warn)
- Each package may have a tiny `eslint.config.mjs` extending the root if needed.
- Prettier: simple defaults; line-endings LF; printWidth 100.

========================================
5) DOCKERFILES & COMPOSE
========================================
- api/Dockerfile:
  - FROM node:18-alpine
  - WORKDIR /app
  - COPY package*.json ./
  - RUN npm ci
  - COPY . .
  - RUN npx prisma generate && npm run build
  - EXPOSE 3001
  - CMD ["node","dist/main.js"]
- ui/Dockerfile:
  - FROM node:18-alpine
  - WORKDIR /app
  - COPY package*.json ./
  - RUN npm ci
  - COPY . .
  - RUN npm run build
  - EXPOSE 8080
  - CMD ["node","scripts/start.js"]
- docker-compose.yml:
  - services:
    - api:
      - build: ./api
      - ports: ["3001:3001"]
      - env_file: ./api/.env
      - volumes:
        - ./api/prisma/var:/app/prisma/var
    - ui:
      - build: ./ui
      - ports: ["8080:8080"]
      - env_file: ./ui/.env
      - depends_on: [api]
  - volumes: (none required beyond the bind mount)
- Ensure `.dockerignore` in api and ui to keep images slim (node_modules ignored; but we run npm ci inside image).

========================================
6) BOOTSTRAP SCRIPT (bootstrap.sh)
========================================
Create a bash script that:
1) Verifies Docker is installed; if not, installs it (get.docker.com) and warns to relogin if first time.
2) Creates api/.env if missing with:
   - NODE_ENV=production
   - PORT=3001
   - DATABASE_URL=file:./var/data.db
   - JWT_SECRET=<random hex>
   - CORS_ORIGIN=http://localhost:8080
3) Creates ui/.env if missing with:
   - NODE_ENV=production
   - PORT=8080
   - NEXT_PUBLIC_API_BASE=http://localhost:3001
4) mkdir -p api/prisma/var
5) docker compose build --no-cache
6) docker compose run --rm api npm run prisma:deploy || true
7) docker compose up -d
8) Generate initial admin if user count==0:
   - email: admin@local
   - password: random strong
   - Print credentials at the end.
Be idempotent: if users exist, do not recreate admin.

========================================
7) DATABASE SCHEMA (Prisma)
========================================
- SQLite file at prisma/var/data.db
- Models:
  - User { id Int @id @default(autoincrement), email String @unique, passwordHash String, role UserRole @default(USER), createdAt DateTime @default(now()) }
  - Enum UserRole: ROOT, ADMIN, USER
  - Project { id Int @id @default(autoincrement), name String, repoUrl String, createdAt DateTime @default(now()) }
    - (MVP: store a single Project row; enforce at service-level only one active)
  - Environment { id Int @id @default(autoincrement), projectId Int, name String, branch String, createdAt DateTime @default(now()) }
  - Variable { id Int @id @default(autoincrement), environmentId Int, key String, value String, isSecret Boolean @default(true) }
  - Domain { id Int @id @default(autoincrement), environmentId Int, hostname String, verified Boolean @default(false), verificationToken String }
  - Deploy { id Int @id @default(autoincrement), projectId Int, environmentId Int, sha String?, status String, startedAt DateTime?, finishedAt DateTime? }
- Add proper relations and indexes.

========================================
8) API ENDPOINTS (Nest)
========================================
- / (GET 200 "ok")
- /health (GET {status:"ok"})
- /auth/has-users (GET → {hasUsers:boolean})
- /auth/register-root (POST {email,password} → 201 or 409 if exists & hasUsers=true)
- /auth/login (POST {email,password} → {token})
- /projects (GET one active; POST create if none; PATCH limited)
- /environments (GET/POST/PATCH/DELETE; branch, name)
- /variables (CRUD per environment; mask secrets on GET)
- /domains (POST add; GET verify instructions; POST mark-verified)
- /deploys (GET list; POST trigger manual)
- /hooks/github (POST webhook; validate signature if OAuth configured; enqueue deploy)
- /platform/health (GET {db:true/false, docker:true/false})
- JWT guard for all except auth/health/root endpoints.
- CORS: allow origin from UI .env.

========================================
9) UI PAGES (Next.js)
========================================
- /login → calls /auth/login, stores JWT in localStorage
- /setup → if /auth/has-users=false: ask email/password, POST /auth/register-root
- /dashboard → cards: Environments, Variables, Domains, Deploys
- /dashboard/environments → list/CRUD envs (branch mapping)
- /dashboard/variables → per-env key/value; secret toggle; save via API
- /dashboard/domains → per-env hostnames; show verification token to add in DNS (MVP); mark verified
- /dashboard/deploys → list deploys; button trigger manual; show status polling
- Navbar shows DB and Docker health via /platform/health
- API helper in lib/api.ts reads NEXT_PUBLIC_API_BASE, attaches JWT.

========================================
10) SCRIPTS & COMMANDS
========================================
Root:
- "setup": runs api and ui setup (api: prisma generate & migrate deploy; ui: create .env if missing)
- "build": builds api (nest build) and ui (next build)
- "start": runs both with concurrently (dev-friendly)
API:
- "setup": "npm run generate && npm run prisma:deploy"
- "generate": "prisma generate"
- "prisma:deploy": "prisma migrate deploy || prisma migrate dev --name init"
- "build": "nest build"
- "start": "node dist/main.js"
UI:
- "setup": "node -e \"const fs=require('fs');if(!fs.existsSync('.env')&&fs.existsSync('.env.example'))fs.copyFileSync('.env.example','.env')\""
- "build": "next build"
- "start": "node scripts/start.js"

========================================
11) ERROR HANDLING & SELF-HEAL RULES
========================================
- If prisma migrate fails due to missing DATABASE_URL: ensure api/.env exists, then rerun migrate deploy.
- If Next.js complains about outputFileTracingRoot: set it at repo root and rebuild.
- If JWT strategy d.ts missing: include src/types/passport-jwt.d.ts or install @types/passport-jwt as devDep.
- If CORS errors: ensure API CORS has origin from UI .env; retry.
- If Docker not found in platform health: display warning banner in UI; do not block core flows.
- If webhook secret missing: UI should show actionable steps to reconfigure GitHub app or PAT.

========================================
12) DOCUMENTATION
========================================
Create a clear README.md covering:
- What is Deeployable
- Requirements (Ubuntu + Docker)
- Quick start:
  - git clone
  - chmod +x bootstrap.sh
  - ./bootstrap.sh
  - open http://IP:8080
  - login with printed credentials
- How to connect GitHub (OAuth vs PAT)
- How to map branches to environments
- How to add domains (MVP: DNS manual verification)
- How to trigger deploys (manual and via webhook)
- How to update
- Troubleshooting (common errors and fixes)
- Roadmap (Phase 2: Caddy SSL, runner with Redis, logs UI, analytics)
Also add CONTRIBUTING.md (branching model, commit style, code style, issues/PR template guidance).

========================================
13) VALIDATION CHECKLIST (RUN BEFORE FINISH)
========================================
- `npm i` at root installs workspaces.
- `npm run setup` succeeds.
- `npm run build` succeeds (no type errors).
- `docker compose up -d` after `./bootstrap.sh` exposes:
  - http://localhost:8080 (UI)
  - http://localhost:3001/health (API → {"status":"ok"})
- Visiting UI:
  - If no users: /setup → creates root successfully
  - Login works; JWT stored; dashboard loads
  - You can create 1 project (or pre-seed single project on bootstrap)
  - Add environment "dev" for branch "dev"
  - Add a variable secret; it masks on list
  - Add a domain; see token to put in DNS; mark verified (no ACME in MVP)
  - Trigger manual deploy; status visible (in-memory queue)
- `npx eslint ...` no errors; `npx prettier --check .` passes.

END.
